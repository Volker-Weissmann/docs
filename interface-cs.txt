Interfacing with C#

When you compile a Cell program, the compiler does not generate a binary executable. Instead, it generates a number of text files containing code in the chosen output language. We'll examine the C# code generator here. If you define a {{Main(..)}} procedure in you Cell code, the generated code can then be handed over to a C# compiler to generate an executable file. That's how for instance the Cell compiler itself is built, and also the simplest way to build a program that tests your automata. But if you don't define a {{Main(..)}} procedure, the compiler will just generate a set of classes, one for each type of automaton in your Cell code, that can be used to instantiate and manipulate the corresponding automata from your C# code. The compiler will produce three files, {{runtime.cs}}, {{generated.cs}} and {{facades.cs}}. The first one contains the runtime library, the second one the core generated code and the last one (which is created only when you don't define a {{Main(..)}} procedure in the Cell code) the definition of the facade classes you'll be interacting with from your own C# code. The interface of those classes is documented in pseudo-C# code in another generated file, {{facades.txt}}. In this chapter we'll go through the interface of the generated classes and explain how to use them, and what each of their methods is for.

It's often a good idea not to use the generated classes directly, but to derive your own classes from them, and add new methods (and/or member or class variables, if needed) there. Another slightly more laborious alternative is to write a wrapper class for them. Among other things, if a method of the generated classes requires some sort of manual data conversion, you really don't want to repeatedly perform those conversions all over your codebase: it's much better to have all of them in just one place. The best thing to do is probably to define an overloaded version of the same method, or a similar one, in the derived class, and have it take care of all data conversions before and/or after invoking the generated one.


Data conversion

The biggest issue one encounters when interfacing two languages as different as Cell and C# is converting data back and forth between the two native representations. Fortunately, the compiler does most of the heavy lifting for you. For starters, there's a number of simple Cell data types that are mapped directly to a corresponding C# type. They are shown in the following table:

{#{csharp/data-conversion.html}#}

The first six entries in the above table are self-explanatory. The mapping for Cell sequences and sets is also straightforward, as both are mapped to C# arrays. For example, the Cell type {{Int*}} is mapped to {{long[]}} in C#, and {{[Date]}} is mapped to {{DateTime[]}}. Similarly, Cell tuples are mapped to tuples in C#, and Cell records to named tuples. The last three entries require a bit of an explanation.

** Cell maps become instances of {{System.Collections.Generic.Dictionary}} in C#, and the mapping is applied recursively to its parameters, just like with sequences or sets. For instance, {{[String -> Float*]}} is mapped to {{Dictionary<String, double[]>}}. You need to be careful here though as {{Dictionary}} works as intended only if the type of the key has a meaningful notion of equality and a {{GetHashCode()}} method that is consistent with it. The Cell type {{[Int* -> String]}}, for example, will be mapped to {{Dictionary<int[], String>}}, which is problematic since in C# two different arrays that happen to have the same content will generally have different hashcodes. Lookups will not work, and you might inadvertently insert duplicate keys in a {{Dictionary}} instance.
** Tagged types can be mapped directly to a C# type only if the tag is a known symbol. In this case, the tag is simply ignored and the mapping of the  untagged value is used. A type like {{<user_id(Int)>}}, for example, will be mapped to a {{long}} in C#, and the generated code will take care of adding or removing the {{user_id}} tag as needed.
** The {{Maybe[T]}} type is mapped directly to the type of its parameter, and the value {{:nothing}} is mapped to {{null}}. {{Maybe[String]}}, for example, is mapped to {{String}}, and the value {{:just("Hello!")}} is returned as the C# string {{"Hello!"}}. Primitive types like {{long}} or {{double}} are replaced with the corresponding nullable types: {{Maybe[Int]}} for example, is mapped to {{int?}}, and {{Maybe[Float]}} to {{double?}}.

When the types involved are too complex for above mapping the compiler tries to generate a C# class for them. It generally needs to do so when dealing with union types. All the generated types are documented in the {{facades.txt}} file. As an example, given the following Cell code:

  type Point = point(x: Int, x: Int);

  type Shape = square(left: Int, bottom: Int, side: Nat),
               rectangle(left: Int, bottom: Int, width: Nat, height: Nat),
               circle(center: Point, radius: Float);

  type List[T] = empty_list, list(T, List[T]);

  schema RelAuto {
    ...
  }

  using RelAuto {
    List[Shape] shapes_at(Point p) = ...
  }

this is what the compiler will generate, in the pseudo-C# code used in {{facades.txt}}:

{#{csharp/interface-type-example.html}#}

The first Cell type, {{Point}}, is mapped to a C# class by the same name. For a union type like {{Shape}} an empty interface is created, and each of the alternatives in the union is mapped to its own type, which implements the interface. The mapping for records and tagged records like {{Square}} or {{Circle}} is obvious. Symbols like {{empty_list}} are mapped to their own singleton class, {{EmptyList}} in this case. Such classes have a private constructor, and their only instance can be accessed through the {{singleton}} class variable. Generic types like {{List[T]}} are never mapped directly to C# types, only their instances are. In this specific case {{List[Shape]}} is mapped to {{List_Shape}}. All generated classes and their member or class variables are public, and they're defined in the {{Cell.Facades}} namespace. They also overload the {{ToString()}} method so that it returns the standard textual representation for the corresponding Cell value. {{Point.ToString()}}, for example, will returns strings like {{"point(12, -5)"}}.

The exact rules that are used to map a Cell type to a corresponding C# type are rather complex, and not yet final, so they won't be described here, but the final result is generally just what you would expect. The mapping has some limitations though: union types are mapped to a generated native type only if they only contain symbols or tagged values. The compiler for example will not generated a C# equivalent for the following type:

  type Point = (x: Int, y: Int), point(x: Int, y: Int);

Finally, when any type of naming conflict arises, the compiler fixes it by adding underscores and/or a unique number at the end of the type name, so don't be surprised if you find generated types with names like {{MyType_}} or {{MyType_2}}.

When everything else fails, values are passed back and forth as strings containing their standard textual representation. That's neither elegant nor particularly efficient, but when passing data from C# to Cell it's at least simple and straightforward, since generating those strings is usually trivial. In the other direction things are a bit more complicated, as you may have to parse those strings, and parsing is a lot more complex than printing. A C# library that will assist with that task will be provided soon, but remember that exchanging data in textual form is just a last resort, and in practice it's very easy to avoid.


Relational automata

Let's now take a look at the classes that are generated when a relational automaton is compiled. We'll make use of a very simple one we've seen before, {{Counter}}:

  schema Counter {
    value:   Int = 0;
    updates: Int = 0;
  }

  Counter.incr {
    set value = value + 1;
    set updates = updates + 1;
  }

  Counter.decr {
    set value = value - 1;
    set updates = updates + 1;
  }

  Counter.reset {
    set value = 0;
    set updates = updates + 1;
  }

  Counter.reset(Int) {
    set value = _untag_(this);
    set updates = updates + 1;
  }

  using Counter {
    Int value   = value;
    Int updates = updates;
  }

This is the interface of the corresponding C# class generated by the Cell compiler:

{#{csharp/counter.html}#}

As you can see, the generated C# class has the same name of the Cell automaton it derives from, and is declared in the {{Cell.Facades}} namespace. The first three methods, {{Load()}}, {{Save(..)}} and {{Execute(..)}}, and the two delegate fields, {{OnSuccess}} and {{OnFailure}}, are the same for all relational automata. All other methods are different for each automaton, and are used to send specific types of messages to it or to invoke its (read-only) methods.

The {{Save(..)}} method is the equivalent of the {{read}} instruction in Cell, in that it takes a snapshot of the state of the automaton, which is written to the provided {{System.IO.Stream}}. The state is saved in the standard text format used for all Cell values.

{{Load(..)}} is used to set the state of an automaton instance, which is read from a {{System.IO.Stream}}, and is the equivalent of the {{write}} instruction in Cell. It can be used at any time in the life of the automaton instance, any number of times. The new state has to be provided in the standard text format. If the provided state is not a valid one, {{Load(..)}} will throw an exception. In that case, the automaton instance will just retain the state it had before, and will still be perfectly functional.

{{Execute(..)}} is used to send the automaton a message, which has to be passed in text form. A few examples:

  counter.Execute("incr");
  counter.Execute("decr");
  counter.Execute("reset");
  counter.Execute("reset(-1)");

Errors handling works in the same way as with {{Load(..)}}. If an error occurs an exception will be thrown, but the automaton will remain fully operational, and its state will be left untouched.

The next four methods, {{Incr()}}, {{Decr()}}, {{Reset()}} and {{Reset(long)}} provides another way to send messages to the automaton:

  counter.Incr();    // Same as counter.execute("incr");
  counter.Reset(-1); // Same as counter.execute("reset(-1)");

They are a lot faster than {{Execute(..)}}, and usually they're more convenient too. There are cases though when the ability to generically send a message of any type to an automaton is crucial, so that's why the compiler provides two ways of doing the same thing.

When updating an automaton instance keep in mind that Cell does not (yet) provide a way to incrementally persist its state: every time you call the {{Save(..)}} method the entire state of the automaton is saved. That's an expensive operation so typically you'll be performing it only once in a while. That means that you would have unsaved data in memory most of the time, which is of course at risk of being lost in the event of a crash. One simple and efficient way to avoid that is to store the list of messages that were received since the last save. If the application crashes, all you need to do when you restart it is to load the last saved state and re-send all the messages it received after that. That will recreate the exact same state you lost in the crash.

The {{OnSuccess}} delegate field is meant to help with that. If it's not {{null}} (which is the initial value) the delegate it points to is called every time a message is processed successfully, and the message itself is passed to it in textual form. The other delegate, {{OnFailure}}, on the other hand is invoked whenever a message handler fails. Saving those failed messages is not necessary for persistence, but it's typically useful for debugging.

The two methods {{Value()}} and {{Updates()}} are just wrappers for the corresponding (read-only) methods of {{Counter}}. Note that the types of such variables is just {{Int}}, which can be mapped directly to {{long}} in C#.


Reactive automata

We'll use {{Switch}} as our first example. We defined it in a previous chapter as follows:

  reactive Switch {
    input:
      switch_on  : Bool;
      switch_off : Bool;

    output:
      is_on : Bool;

    state:
      is_on : Bool = switch_on;

    rules:
      is_on = true  when switch_on;
      is_on = false when switch_off;
  }

This is the interface of the corresponding C# class:

{#{csharp/switch.html}#}

The first thing to note here is the two enumerations {{Input}} and {{Output}}, whose elements are the uppercase version of the names of the inputs and outputs of {{Switch}}. These are used in conjunction with the methods {{SetInput()}} and {{ReadOutput()}} as shown here:

{#{csharp/switch-client-cs-A.html}#}

As an alternative to {{SetInput(..)}} and {{ReadOutput(..)}}, which can operate on any input or output and use the textual representation of a value as an exchange format, the generated class also provides another set of methods each of which can manipulate a single input or output, but that are more convenient to use in most cases. The above code snippet can be rewritten as follow:

{#{csharp/switch-client-cs-B.html}#}

{{ReadState()}} takes a snapshot of the state of the automaton and returns it in textual form. {{SetState(..)}} does the opposite: it sets the state of the automaton to whatever state is passed to it. Here too the new state has to be provided in textual form. When working with time-aware automata both methods are subjects to the limitations that we've already discussed in a previous chapter. The method {{ChangedOutputs()}} provides a list of outputs that have changed (or have been active, in the case of discrete outputs) as a result of the last call to {{Apply()}}:

{#{csharp/switch-client-cs-C.html}#}

The last thing we need to see is how to deal with time-aware automata. We'll use {{WaterSensor}}, whose definition is copied here:

  type WaterSensorState = initializing, unknown, submerged(Bool);

  reactive WaterSensor raw_reading -> sensor_state {
    input:
      raw_reading* : Maybe[Bool];

    output:
      sensor_state : WaterSensorState;

    state:
      sensor_state : WaterSensorState = :initializing;

    rules:
      good_reading := value(raw_reading) if raw_reading != :nothing;
      too_long_without_readings = 30s sans good_reading;
      sensor_state = :submerged(good_reading);
      sensor_state = :unknown when too_long_without_readings;
  }

This is the interface of the generated C# class:

{#{csharp/water-sensor.html}#}

The only differences here, apart from the input setters and output getters which are obviously specific to each automaton type, are the two extra methods {{SetElapsedSecs(..)}} and {{SetElapsedMillisecs(..)}} and the fact that {{Apply()}} now returns a boolean value. The former are the equivalent of the {{elapsed}} instruction in Cell, and the value now returned by {{Apply()}} has the same meaning as the one returned by the {{apply}} instruction in a Cell procedure. Here's an example of how to update an instance of {{WaterSensor}}:

{#{csharp/water-sensor-client.html}#}
