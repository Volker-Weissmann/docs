Current status

The latest version of the language is 0.5. It's still a beta, but in terms of functionalities and performance it's already complete, in the sense that everything that was planned for the 1.0 release has now been implemented. Basically, version 0.5 is version 1.0, only with more bugs.

More in detail, the functional subset of the language seems now pretty solid. It has been used to write several non-trivial applications, the largest of which is the Cell compiler itself, and no major bugs have been found in more than two years now.

Relational automata are feature-complete (again, only in the sense that all features planned for release 1.0 have already been implemented), and performance is already pretty good, but they still need more testing.

Reactive automata are at this stage still experimental. Not only they haven't been tested anywhere enough but unlike their relational counterparts their design is still tentative and in a state of flux, and their implementation more complex. They're not expected to come out of beta until after version 1.0.


Road map

In the coming month expect frequent minor releases (0.5.X) that will bring bug fixes, tweaks to the interface of the generated code, targeted performance improvements and an expanded standard library. Up-to-date versions of the C# and C++ code generators (which haven't been updated since 0.1) will also be released soon.

Version 0.6 will be the released candidate for 1.0. It won't bring any new features, but it will focus exclusively on testing of relational automata (as explained before, the functional part of the language is already pretty solid, and reactive automata are expected to be still in beta for version 1.0). There's no release date yet.

Version 1.0 will be released once 0.6 has seen enough real world usage and is deemed solid enough to warrant the "1.0" label. That could potentially take a while, but the development of Cell will not stop in the meantime.

One of the first priorities after 0.6 will be the implementation of at least the simplest versions of the network architecture.

There's also a long list of things to do for reactive automata. You can read about them {<{<a href='reactive-future-work.html'>here</a>}>}.

After 1.0 is released, development will focus again on relational automata, and the most important new features will be Datalog-like inference rules with memoization, and more powerful update models. The current update model has clear limitations, but it has a couple of important properties: state transitions are atomic (that is, only the states before and after the transition can be observed, and all intermediate ones are just an implementation detail that is hidden from the developer) and it is amenable to a parallel implementation. The new models will preserve these properties, while adding more flexibility and modularity.
